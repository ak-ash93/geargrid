// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
enum UserRole{
  USER
  ADMIN
}

model User{
  id             String           @id @default(uuid())
  clerkUserId    String           @unique  // Unique identifier for Clerk user
  name           String
  email          String           @unique
  phone          String?          @unique
  imageUrl       String?   
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  role           UserRole         @default(USER)
  savedCars      UserSavedCar[]
  testDrives     TestDrive[]
}

model Cars{
  id             String     @id @default(uuid())
  make           String
  model          String
  year           Int
  price          Decimal    @db.Decimal(10, 2) 
  mileage        Int
  color          String
  fuelType       String
  transmission   String
  bodyType       String
  seats          Int?
  description    String
  status         CarStatus   @default(Available)
  featured       Boolean    @default(false)
  images         String[]
  savedBy        UserSavedCar[]
  testDrives     TestDrive[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  
  @@index([make, model])
  @@index([year])
  @@index([price])
  @@index([status])
  @@index([fuelType])
  @@index([featured])
  

  }
enum CarStatus {
  
  Available
  Sold
  UNAVAILABLE
}

model DealershipInfo{
  id             String     @id @default(uuid())
  name           String
  address        String
  phone          String?
  email          String?
  website        String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model UserSavedCar{
  id             String     @id @default(uuid())
  userId         String
  carId          String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  user           User       @relation(fields: [userId], references: [id])
  car            Cars       @relation(fields: [carId], references: [id])

  @@unique([userId, carId]) // Ensure a user can save a car only once
  @@index([userId])
  @@index([carId])

}

model TestDrive{
  id             String     @id @default(uuid())
  userId         String
  carId          String
  scheduledOn    DateTime   @db.Date
  status         BookingStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  notes          String?

  user           User       @relation(fields: [userId], references: [id])
  car            Cars       @relation(fields: [carId], references: [id])

  @@index([userId])
  @@index([carId])
  @@index([scheduledOn])
  @@index([status])

}
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}